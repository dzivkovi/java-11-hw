# Losely based on the existing "manifest.yml" file and the GCP labs: 
# https://github.com/GoogleCloudPlatform/software-delivery-workshop/tree/main/labs/cloudrun-progression
#
# Implemented using workaround for 'build with pack and secrets manager not accessing environment variables' as per:
# https://stackoverflow.com/questions/73176741/google-cloud-build-with-pack-and-secrets-manager-not-accessing-environment-varia

# Default Values
substitutions:
  _TEAM: r2d2                           # Used as a Repo in the Artifact Registry
  _APPLICATION_NAME: java-11-hw 
  _APPLICATION_RUNTIME_VERSION: "17"
  _REGION: us-central1

  # Requires authentication in all non-demo environments!
  _AUTHENTICATION: "--no-allow-unauthenticated"
  _IMAGE_NAME: "${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_TEAM}/${_APPLICATION_NAME}"
  _TAG: ${SHORT_SHA:-"shell-run"}       # $SHORT_SHA defined when invoked by triggers
  _BRANCH_NAME: ${BRANCH_NAME:-"demo"}  # $BRANCH_NAME defined when invoked by triggers
  _PULL_REQUEST_TARGET_BRANCH: ${PULL_REQUEST_TARGET_BRANCH:-"shell-run"}

# Allow dynamic variable substitutions
options:
  dynamic_substitutions: true

# Start the build with the following
steps:

### Build
  - id: "Build image from source"
    name: "gcr.io/k8s-skaffold/pack"
    entrypoint: "sh"
    args:
    - '-c'
    - |
      pack build ${_IMAGE_NAME}:${_TAG} \
        --builder=gcr.io/buildpacks/builder \
        --env=GOOGLE_RUNTIME_VERSION=${_APPLICATION_RUNTIME_VERSION} \
        --path . \
        --network cloudbuild

### Test before the image tagging
  - id: "Run tests (adjust as needed)"
    name: 'gcr.io/cloud-builders/mvn'
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Starting SonarQube analysis..."
        mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Dsonar.projectKey=dzivkovi_java-11-hw \
          -Dsonar.projectName=java-11-hw \
          -Dsonar.organization=dzivkovi \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.token="${_SONAR_TOKEN}" \
          -Dsonar.sources=src/main/java \
          -Dsonar.tests=src/test/java \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.java.source=1.8 \
          -Dsonar.java.libraries=target/*.jar \
          -Dsonar.exclusions=**/idea/**,**/doc/** \
          -Dsonar.test.exclusions=**/target/**,**/*.xml,**/*.json,**/*.txt \
          -Dsonar.coverage.exclusions=**/mkyong/error/**,**/mkyong/test/** \
          -Dsonar.analysis.mode=publish

### Push the 'latest' tag
  - id: "Tag image as 'latest' and 'dev' before the push"
    name: "gcr.io/cloud-builders/docker"
    entrypoint: "bash"
    args:
      - '-c'
      - |
          set -euo pipefail   # Bash specific options
          docker tag ${_IMAGE_NAME}:${_TAG} ${_IMAGE_NAME}:latest && \
          docker tag ${_IMAGE_NAME}:${_TAG} ${_IMAGE_NAME}:dev && \
          docker push ${_IMAGE_NAME}:${_TAG} && \
          docker push ${_IMAGE_NAME}:latest && \
          docker push ${_IMAGE_NAME}:dev

### Deploy to DEV environment
  - id: "Deploy the 'latest' image to DEV"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - '-c'
      - |
          set -e  # Exit on error
          gcloud run deploy ${_APPLICATION_NAME}-dev ${_AUTHENTICATION} \
            --platform managed \
            --project $PROJECT_ID \
            --region ${_REGION} \
            --image ${_IMAGE_NAME}:latest

### Delete the Cloud Run instance used during the feature development
  - id: "Delete the old (source branch-named) app"
    name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        # Get the source branch name
        source_branch_name=${_BRANCH_NAME}

        # Get the target branch name (should be DEV)
        target_branch_name=${_PULL_REQUEST_TARGET_BRANCH}

        # Exit if any command fails
        set -e

        # Check if the target branch is DEV
        if [[ "${target_branch_name}" == "dev" ]]; then
          # Get the Cloud Run service name
          app_name=$(echo ${_APPLICATION_NAME}-${source_branch_name} \
            | sed 's/[^a-zA-Z0-9-]/-/g' | cut -c1-63)

          # Delete the Cloud Run service
          gcloud run services delete "$app_name" \
            --platform managed \
            --project $PROJECT_ID \
            --region ${_REGION} || true

          echo "Deleted Cloud Run service: $app_name"
        else
          echo "Skipping Cloud Run service deletion for branch: $target_branch_name"
        fi

images:
- ${_IMAGE_NAME}
